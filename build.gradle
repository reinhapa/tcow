plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    alias libs.plugins.ben.manes.versions
    alias libs.plugins.nemerosa.versioning
    alias libs.plugins.owasp.dependencycheck
    alias libs.plugins.sonarqube
}

application {
    mainClass = 'net.reini.tcow.Billing'
}

repositories {
    mavenCentral()
}

eclipse {
  classpath.downloadSources = true
  jdt.javaRuntimeName = 'JavaSE-21'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
//    withJavadocJar()
//    withSourcesJar()
}

test {
  useJUnitPlatform()
}

dependencies {
    implementation libs.jakarta.mail.api
    implementation libs.jasper.reports
    implementation libs.jasper.reports.functions
    implementation libs.jasper.reports.jdt
    implementation libs.jasper.reports.pdf
    implementation libs.odfdom.java
    implementation libs.openpdf
    implementation libs.qrinvoice.core
    implementation libs.qrinvoice.openpdf
    implementation libs.slf4j.api

    runtimeOnly libs.jakarta.angus.mail
    runtimeOnly libs.logback.classic
    runtimeOnly libs.logback.core

    testImplementation libs.assertj.core
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testRuntimeOnly libs.junit.platform.runner
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
